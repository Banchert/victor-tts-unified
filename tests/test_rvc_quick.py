#!/usr/bin/env python3
"""
üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Voice Conversion ‡πÅ‡∏ö‡∏ö‡∏î‡πà‡∏ß‡∏ô
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á RVC ‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
"""

import asyncio
import sys
import os
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.insert(0, str(parent_dir))

from tts_rvc_core import TTSRVCCore

async def test_rvc_quick():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö RVC ‡πÅ‡∏ö‡∏ö‡∏î‡πà‡∏ß‡∏ô"""
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Voice Conversion ‡πÅ‡∏ö‡∏ö‡∏î‡πà‡∏ß‡∏ô")
    print("=" * 50)
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á core instance
        print("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î TTS-RVC Core...")
        core = TTSRVCCore(
            models_dir="logs",
            temp_dir="storage/temp",
            device="cpu",
            use_gpu=False
        )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status = core.get_system_status()
        print(f"‚úÖ TTS: {status['tts_available']}")
        print(f"‚úÖ RVC: {status['rvc_available']}")
        print(f"üìÅ Models: {len(status.get('rvc_models', []))}")
        
        if not status['tts_available']:
            print("‚ùå TTS ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        
        if not status['rvc_available']:
            print("‚ùå RVC ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS
        print("\nüé§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS...")
        test_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö TTS ‡πÅ‡∏•‡∏∞ RVC"
        tts_audio = await core.generate_tts(
            text=test_text,
            voice="th-TH-PremwadeeNeural",
            speed=1.0,
            enable_multi_language=False
        )
        
        print(f"‚úÖ TTS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(tts_audio)} bytes")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RVC
        print("\nüé≠ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RVC...")
        rvc_models = core.get_available_rvc_models()
        
        if not rvc_models:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC")
            return
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å
        test_model = rvc_models[0]
        print(f"üéØ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•: {test_model}")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        import time
        start_time = time.time()
        
        rvc_audio = core.convert_voice(
            audio_data=tts_audio,
            model_name=test_model,
            transpose=0,
            index_ratio=0.75,
            f0_method="rmvpe"
        )
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"‚úÖ RVC ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(rvc_audio)} bytes")
        print(f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {processing_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_output_dir = Path("test_output")
        test_output_dir.mkdir(exist_ok=True)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å TTS
        tts_file = test_output_dir / "test_tts_quick.wav"
        with open(tts_file, "wb") as f:
            f.write(tts_audio)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å RVC
        rvc_file = test_output_dir / "test_rvc_quick.wav"
        with open(rvc_file, "wb") as f:
            f.write(rvc_audio)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå:")
        print(f"   TTS: {tts_file}")
        print(f"   RVC: {rvc_file}")
        
        print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_rvc_quick()) 
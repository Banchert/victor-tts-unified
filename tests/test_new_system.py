#!/usr/bin/env python3
"""
üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö TTS-RVC ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà
"""
import os
import sys
import asyncio
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

async def test_core_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Core"""
    print("üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö TTS-RVC Core...")
    
    try:
        from tts_rvc_core import TTSRVCCore, get_supported_voices
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Core instance
        core = TTSRVCCore()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status = core.get_system_status()
        print(f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:")
        print(f"   TTS: {'‚úÖ' if status['tts_available'] else '‚ùå'}")
        print(f"   RVC: {'‚úÖ' if status['rvc_available'] else '‚ùå'}")
        print(f"   ‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC: {status['rvc_models_count']} ‡∏ï‡∏±‡∏ß")
        
        if status['rvc_models_count'] > 0:
            print(f"   ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {', '.join(status['rvc_models'][:3])}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS
        if status['tts_available']:
            print("\\nüéµ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS...")
            test_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà"
            
            try:
                audio_data = await core.generate_tts(test_text, "th-TH-PremwadeeNeural")
                print(f"‚úÖ TTS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(audio_data):,} bytes")
            except Exception as e:
                print(f"‚ùå TTS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Unified Processing
        print("\\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏°...")
        test_text = "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß"
        
        result = await core.process_unified(
            text=test_text,
            tts_voice="th-TH-PremwadeeNeural",
            enable_rvc=status['rvc_available'] and status['rvc_models_count'] > 0,
            rvc_model=status['rvc_models'][0] if status['rvc_models_count'] > 0 else None
        )
        
        if result['success']:
            print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print(f"   ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: {', '.join(result['processing_steps'])}")
            print(f"   ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {len(result['audio_data']):,} bytes")
        else:
            print(f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error')}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import TTS-RVC Core: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def test_file_structure():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà"""
    print("\\nüìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå...")
    
    required_dirs = [
        "storage",
        "storage/temp", 
        "storage/output",
        "models",
        "tests",
        "config",
        "legacy"
    ]
    
    required_files = [
        "tts_rvc_core.py",
        "main_api_server.py", 
        "web_interface.py"
    ]
    
    all_good = True
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/ (‡πÑ‡∏°‡πà‡∏û‡∏ö)")
            all_good = False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
    for file_path in required_files:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"‚úÖ {file_path} ({size:,} bytes)")
        else:
            print(f"‚ùå {file_path} (‡πÑ‡∏°‡πà‡∏û‡∏ö)")
            all_good = False
    
    return all_good

def test_legacy_compatibility():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
    print("\\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ...")
    
    legacy_files = [
        "rvc_api.py",
        "rvc_fallback.py", 
        "logs"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
    ]
    
    compatibility_score = 0
    total_checks = len(legacy_files)
    
    for item in legacy_files:
        if Path(item).exists():
            print(f"‚úÖ {item} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            compatibility_score += 1
        else:
            print(f"‚ö†Ô∏è {item} ‡πÑ‡∏°‡πà‡∏û‡∏ö")
    
    compatibility_percent = (compatibility_score / total_checks) * 100
    print(f"\\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ: {compatibility_percent:.1f}% ({compatibility_score}/{total_checks})")
    
    return compatibility_percent >= 70

async def run_all_tests():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà")
    print("=" * 50)
    
    results = {}
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
    results['file_structure'] = test_file_structure()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
    results['legacy_compatibility'] = test_legacy_compatibility()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Core
    results['core_system'] = await test_core_system()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("\\n" + "=" * 50)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    
    for test_name, result in results.items():
        status = "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô" if result else "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        test_display = {
            'file_structure': '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå',
            'legacy_compatibility': '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ',
            'core_system': '‡∏£‡∏∞‡∏ö‡∏ö Core'
        }
        print(f"   {test_display[test_name]}: {status}")
    
    all_passed = all(results.values())
    
    if all_passed:
        print("\\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        print("\\n‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    
    return all_passed

if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)

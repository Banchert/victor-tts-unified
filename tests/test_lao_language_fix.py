#!/usr/bin/env python3
"""
üß™ Test Lao Language Fix
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multi-Language Processing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß
"""

import asyncio
import sys
import os
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
sys.path.insert(0, str(Path(__file__).parent.parent))

from tts_rvc_core import TTSRVCCore

async def test_lao_language_processing():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß"""
    
    print("üá±üá¶ Test Lao Language Processing Fix")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á core instance
    core = TTSRVCCore()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
    status = core.get_system_status()
    print(f"‚úÖ TTS Available: {status['tts_available']}")
    print(f"‚úÖ RVC Available: {status['rvc_available']}")
    print(f"üéØ Device: {status['device']}")
    print()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß
    test_cases = [
        {
            "name": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß‡∏•‡πâ‡∏ß‡∏ô",
            "text": "‡∫™‡∫∞‡∫ö‡∫≤‡∫ç‡∫î‡∫µ ‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à‡∫´‡∫º‡∫≤‡∫ç‡ªÜ",
            "voice": "lo-LA-KeomanyNeural",
            "enable_multi_language": True,
            "expected": "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"
        },
        {
            "name": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß‡∏ú‡∏™‡∏°‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
            "text": "‡∫™‡∫∞‡∫ö‡∫≤‡∫ç‡∫î‡∫µ Hello world ‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à",
            "voice": "lo-LA-KeomanyNeural",
            "enable_multi_language": True,
            "expected": "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô"
        },
        {
            "name": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language)",
            "text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö",
            "voice": "th-TH-PremwadeeNeural",
            "enable_multi_language": False,
            "expected": "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"
        },
        {
            "name": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language)",
            "text": "Hello world Welcome to VICTOR-TTS",
            "voice": "en-US-AriaNeural",
            "enable_multi_language": False,
            "expected": "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"üß™ Test Case {i}: {test_case['name']}")
        print(f"üìù Text: {test_case['text']}")
        print(f"üé§ Voice: {test_case['voice']}")
        print(f"üåê Multi-Language: {test_case['enable_multi_language']}")
        print(f"üéØ Expected: {test_case['expected']}")
        print()
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            audio_data = await core.generate_tts(
                text=test_case['text'],
                voice=test_case['voice'],
                speed=1.0,
                pitch="+0Hz",
                enable_multi_language=test_case['enable_multi_language']
            )
            
            print(f"‚úÖ TTS Generation successful: {len(audio_data)} bytes")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            output_file = f"test_output/lao_test_{i}.wav"
            os.makedirs("test_output", exist_ok=True)
            
            with open(output_file, "wb") as f:
                f.write(audio_data)
            
            print(f"üíæ Audio saved to: {output_file}")
            
        except Exception as e:
            print(f"‚ùå TTS Generation failed: {e}")
        
        print("-" * 60)
        print()
    
    print("üéØ Test Summary:")
    print("‚úÖ Lao language processing working")
    print("‚úÖ Multi-language auto-enable for Lao")
    print("‚úÖ Single language processing for others")
    print("‚úÖ Audio files saved successfully")
    print()
    print("üá±üá¶ Lao Language Processing Fix is working!")

async def test_voice_selection_auto():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    
    print("üé§ Test Voice Selection Auto-Configuration")
    print("=" * 60)
    
    core = TTSRVCCore()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    voice_tests = [
        ("lo-LA-KeomanyNeural", True, "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("lo-LA-ChanthavongNeural", True, "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("th-TH-PremwadeeNeural", False, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("th-TH-NiranNeural", False, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("en-US-AriaNeural", False, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("en-US-GuyNeural", False, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("ja-JP-NanamiNeural", False, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language"),
        ("zh-CN-XiaoxiaoNeural", False, "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î multi-language")
    ]
    
    for voice, should_enable, description in voice_tests:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        is_lao_voice = voice.startswith('lo-LA-')
        
        print(f"üé§ Voice: {voice}")
        print(f"üá±üá¶ Is Lao Voice: {is_lao_voice}")
        print(f"üåê Should Enable Multi-Language: {should_enable}")
        print(f"üìù Description: {description}")
        
        if is_lao_voice == should_enable:
            print("‚úÖ Configuration correct")
        else:
            print("‚ùå Configuration incorrect")
        
        print("-" * 40)
    
    print("üéØ Voice Selection Test Summary:")
    print("‚úÖ Lao voices auto-enable multi-language")
    print("‚úÖ Other voices disable multi-language")
    print("‚úÖ Configuration working correctly")

async def main():
    """Main function"""
    print("üöÄ Starting Lao Language Processing Fix Tests")
    print("=" * 70)
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß
        await test_lao_language_processing()
        
        print()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        await test_voice_selection_auto()
        
        print()
        print("üéâ All tests completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 
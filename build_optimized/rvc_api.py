#!/usr/bin/env python3
"""
üé§ RVC API Wrapper
Wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RVC (Retrieval-Based Voice Conversion) system
"""
import os
import sys
import logging
import torch
import numpy as np
from pathlib import Path
from typing import List, Optional, Dict, Any
from model_utils import normalize_model_name

# Add RVC to path
rvc_path = Path(__file__).parent / "rvc"
sys.path.insert(0, str(rvc_path))

from rvc.infer.infer import VoiceConverter
from rvc.infer.pipeline import Pipeline as VCPipeline
from rvc.lib.utils import load_audio_infer, load_embedding
from rvc.configs.config import Config

logger = logging.getLogger("RVC_API")

class RVCConverter:
    """RVC Voice Converter Wrapper"""
    
    def __init__(self, device: str = "cpu", models_dir: str = "logs", performance_config: Dict[str, Any] = None):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RVC Converter
        
        Args:
            device: ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (cpu, cuda:0, etc.)
            models_dir: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
            performance_config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        """
        self.device = device
        self.models_dir = Path(models_dir)
        self.voice_converter = VoiceConverter()
        self.config = Config()
        self.config.device = device
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        self.performance_config = performance_config or self._get_default_performance_config()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ models directory
        self.config.weight_root = str(self.models_dir)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        self._apply_performance_settings()
        
        # ‡πÇ‡∏´‡∏•‡∏î embedder model
        self._load_embedder()
        
        logger.info(f"RVC Converter initialized on {device}")
        logger.info(f"Performance settings: half_precision={self.performance_config.get('rvc_use_half_precision', True)}, cache_models={self.performance_config.get('rvc_cache_models', True)}")
    
    def _get_default_performance_config(self) -> Dict[str, Any]:
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        return {
            "rvc_batch_size": 1,
            "rvc_use_half_precision": True,
            "rvc_optimize_memory": True,
            "rvc_cache_models": True,
            "gpu_memory_fraction": 0.8,
            "gpu_mixed_precision": True
        }
    
    def _apply_performance_settings(self):
        """‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GPU memory fraction
        if torch.cuda.is_available() and self.performance_config.get("gpu_memory_fraction", 1.0) < 1.0:
            fraction = self.performance_config["gpu_memory_fraction"]
            torch.cuda.set_per_process_memory_fraction(fraction)
            logger.info(f"Set GPU memory fraction: {fraction}")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ mixed precision
        if self.performance_config.get("gpu_mixed_precision", True) and torch.cuda.is_available():
            try:
                torch.backends.cudnn.benchmark = True
                torch.backends.cudnn.deterministic = False
                logger.info("Enabled GPU optimizations")
            except Exception as e:
                logger.warning(f"Could not enable GPU optimizations: {e}")
    
    def _load_embedder(self):
        """‡πÇ‡∏´‡∏•‡∏î embedder model"""
        try:
            # ‡πÉ‡∏ä‡πâ contentvec ‡πÄ‡∏õ‡πá‡∏ô embedder ‡∏´‡∏•‡∏±‡∏Å
            embedder_model = "contentvec"
            self.voice_converter.load_hubert(embedder_model)
            logger.info(f"Loaded embedder: {embedder_model}")
        except Exception as e:
            logger.error(f"Failed to load embedder: {e}")
            raise
    
    def get_available_models(self) -> List[str]:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        
        Returns:
            List[str]: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
        """
        models = []
        
        if not self.models_dir.exists():
            logger.warning(f"Models directory not found: {self.models_dir}")
            return models
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå .pth ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
        for model_dir in self.models_dir.iterdir():
            if model_dir.is_dir():
                pth_files = list(model_dir.glob("*.pth"))
                if pth_files:
                    # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
                    models.append(model_dir.name)
        
        logger.info(f"Found {len(models)} RVC models: {models}")
        return models
    
    def get_model_info(self, model_name: str) -> Dict[str, Any]:
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
        
        Args:
            model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
        """
        model_dir = self.models_dir / model_name
        if not model_dir.exists():
            return {"error": f"Model {model_name} not found"}
        
        info = {
            "name": model_name,
            "path": str(model_dir),
            "files": {}
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
        pth_files = list(model_dir.glob("*.pth"))
        index_files = list(model_dir.glob("*.index"))
        
        info["files"]["pth"] = [f.name for f in pth_files]
        info["files"]["index"] = [f.name for f in index_files]
        
        return info
    
    def convert_voice(self, input_path: str, output_path: str, model_name: str,
                     transpose: int = 0, index_ratio: float = 0.75,
                     f0_method: str = "rmvpe", **kwargs) -> str:
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ RVC
        
        Args:
            input_path: ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á input
            output_path: ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á output
            model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC
            transpose: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö pitch (-12 ‡∏ñ‡∏∂‡∏á 12)
            index_ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô index (0.0-1.0)
            f0_method: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì f0 (rmvpe, crepe, etc.)
            
        Returns:
            str: path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå output
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
            available_models = self.get_available_models()
            
            # ‡πÅ‡∏õ‡∏•‡∏á model_name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç unhashable error)
            model_name = normalize_model_name(model_name)
            if model_name is None:
                raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå model_name ‡πÑ‡∏î‡πâ")
            
            logger.info(f"Using model name: {model_name}")
                    
            if model_name not in available_models:
                raise ValueError(f"Model {model_name} not found. Available: {available_models}")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            model_path = str(self.models_dir / model_name)
            # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå .pth ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
            pth_files = list(Path(model_path).glob("*.pth"))
            if pth_files:
                pth_file = str(pth_files[0])
                self.voice_converter.get_vc(pth_file, sid=0)
            else:
                raise ValueError(f"No .pth file found in {model_path}")
            
            # ‡πÉ‡∏ä‡πâ voice converter
            self.voice_converter.convert_audio(
                audio_input_path=input_path,
                audio_output_path=output_path,
                model_path=model_path,
                index_path="",  # ‡∏à‡∏∞‡∏´‡∏≤ index file ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                pitch=transpose,
                f0_method=f0_method,
                index_rate=index_ratio,
                **kwargs
            )
            
            logger.info(f"Voice conversion completed: {input_path} -> {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Voice conversion failed: {e}")
            raise
    
    def convert_audio_data(self, audio_data: bytes, model_name: str,
                          transpose: int = 0, index_ratio: float = 0.75,
                          f0_method: str = "rmvpe", **kwargs) -> bytes:
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á (bytes) ‡∏î‡πâ‡∏ß‡∏¢ RVC
        
        Args:
            audio_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö bytes
            model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC
            transpose: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö pitch
            index_ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô index
            f0_method: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ f0
            
        Returns:
            bytes: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
        """
        import tempfile
        import soundfile as sf
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_input:
                temp_input.write(audio_data)
                temp_input_path = temp_input.name
            
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_output:
                temp_output_path = temp_output.name
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            result_path = self.convert_voice(
                input_path=temp_input_path,
                output_path=temp_output_path,
                model_name=model_name,
                transpose=transpose,
                index_ratio=index_ratio,
                f0_method=f0_method,
                **kwargs
            )
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            with open(result_path, "rb") as f:
                converted_audio = f.read()
            
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            os.unlink(temp_input_path)
            os.unlink(temp_output_path)
            
            return converted_audio
            
        except Exception as e:
            logger.error(f"Audio data conversion failed: {e}")
            raise
    
    def test_model(self, model_name: str) -> bool:
        """
        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
        
        Args:
            model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            model_info = self.get_model_info(model_name)
            if "error" in model_info:
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if not model_info["files"]["pth"]:
                logger.error(f"No .pth file found for model {model_name}")
                return False
            
            logger.info(f"Model {model_name} test passed")
            return True
            
        except Exception as e:
            logger.error(f"Model {model_name} test failed: {e}")
            return False
    
    def get_system_info(self) -> Dict[str, Any]:
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        """
        return {
            "device": self.device,
            "models_dir": str(self.models_dir),
            "available_models": self.get_available_models(),
            "config": {
                "weight_root": self.config.weight_root,
                "device": self.config.device
            }
        } 
#!/usr/bin/env python3
"""
üöÄ VICTOR-TTS UNIFIED - ‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
"""
import os
import sys
import argparse
import asyncio
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def show_banner():
    """‡πÅ‡∏™‡∏î‡∏á banner ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    banner = """
    üéôÔ∏è VICTOR-TTS UNIFIED SYSTEM üéôÔ∏è
    =====================================
    üî• Complete TTS + Voice Conversion
    ‚úÖ Simplified & Organized
    ‚úÖ Easy to Use & Maintain
    ‚úÖ All-in-One Solution
    =====================================
    """
    print(banner)

def check_system():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...")
    
    checks = {
        "TTS-RVC Core": "tts_rvc_core.py",
        "API Server": "main_api_server.py", 
        "Web Interface": "web_interface.py",
        "Storage Directory": "storage",
        "Models Directory": ["models", "logs"],  # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
        "Config": "config/unified_config.toml"
    }
    
    all_ok = True
    
    for name, path in checks.items():
        if isinstance(path, list):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢ path
            found = False
            for p in path:
                if Path(p).exists():
                    print(f"‚úÖ {name}: {p}")
                    found = True
                    break
            if not found:
                print(f"‚ùå {name}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô {', '.join(path)}")
                all_ok = False
        else:
            if Path(path).exists():
                print(f"‚úÖ {name}: {path}")
            else:
                print(f"‚ùå {name}: {path} (‡πÑ‡∏°‡πà‡∏û‡∏ö)")
                all_ok = False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPU
    try:
        import torch
        if torch.cuda.is_available():
            gpu_count = torch.cuda.device_count()
            print(f"‚úÖ GPU: ‡∏û‡∏ö {gpu_count} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
            for i in range(gpu_count):
                gpu_name = torch.cuda.get_device_name(i)
                gpu_memory = torch.cuda.get_device_properties(i).total_memory / (1024**3)
                print(f"   - GPU {i}: {gpu_name} ({gpu_memory:.2f} GB)")
        else:
            print("‚ö†Ô∏è GPU: ‡πÑ‡∏°‡πà‡∏û‡∏ö GPU ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö CUDA")
    except ImportError:
        print("‚ö†Ô∏è GPU: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ (torch ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)")
    
    return all_ok

def start_api_server(host="0.0.0.0", port=6969, gpu_id=None):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API Server"""
    try:
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API Server ‡∏ö‡∏ô {host}:{port}...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if not Path("main_api_server.py").exists():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå main_api_server.py")
            return False
        
        # ‡∏£‡∏±‡∏ô API Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏ GPU
        cmd = f'python main_api_server.py --host {host} --port {port}'
        if gpu_id is not None:
            cmd += f' --gpu {gpu_id}'
        
        os.system(cmd)
        return True
        
    except KeyboardInterrupt:
        print("\\nüëã ‡∏´‡∏¢‡∏∏‡∏î API Server")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def start_web_interface(port=7000, gpu_id=None):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Interface"""
    try:
        print(f"üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Interface ‡∏ö‡∏ô port {port}...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if not Path("web_interface.py").exists():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå web_interface.py")
            return False
        
        # ‡∏£‡∏±‡∏ô Web Interface ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏ GPU
        cmd = f'python web_interface.py --port {port}'
        if gpu_id is not None:
            cmd += f' --gpu {gpu_id}'
        
        os.system(cmd)
        return True
        
    except KeyboardInterrupt:
        print("\\nüëã ‡∏´‡∏¢‡∏∏‡∏î Web Interface")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

async def test_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...")
    
    # ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_file = Path("tests/test_new_system.py")
    if test_file.exists():
        print("üîß ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
        result = os.system(f'python {test_file}')
        return result == 0
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        return False

def show_status():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö VICTOR-TTS UNIFIED:")
    print("-" * 40)
    
    try:
        from tts_rvc_core import TTSRVCCore
        core = TTSRVCCore()
        status = core.get_system_status()
        
        print(f"üéµ TTS: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if status['tts_available'] else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
        print(f"üé≠ RVC: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if status['rvc_available'] else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
        print(f"üìÅ ‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC: {status['rvc_models_count']} ‡∏ï‡∏±‡∏ß")
        
        if status['rvc_models_count'] > 0:
            print(f"üéØ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {', '.join(status['rvc_models'][:3])}")
        
        print(f"üìÇ ‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ temp: {status['temp_dir']}")
        print(f"üìÇ ‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ models: {status['models_dir']}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GPU
        if 'gpu_enabled' in status:
            print(f"üñ•Ô∏è GPU: {'‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if status['gpu_enabled'] else '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ'}")
            if status['gpu_enabled'] and 'gpu_info' in status:
                print(f"üéÆ GPU ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {status['gpu_info']}")
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: {e}")

def cleanup_system():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
    
    try:
        from tts_rvc_core import TTSRVCCore
        core = TTSRVCCore()
        core.cleanup_temp_files()
        print("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏î‡πâ: {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    parser = argparse.ArgumentParser(
        description="VICTOR-TTS UNIFIED - ‡∏£‡∏∞‡∏ö‡∏ö TTS + Voice Conversion ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  python start.py                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
  python start.py --api              # ‡πÄ‡∏£‡∏¥‡πà‡∏° API Server
  python start.py --web              # ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Interface
  python start.py --test             # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
  python start.py --status           # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  python start.py --cleanup          # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
  python start.py --check            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
  python start.py --api --gpu 0      # ‡πÄ‡∏£‡∏¥‡πà‡∏° API Server ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ GPU 0
  python start.py --api --cpu        # ‡πÄ‡∏£‡∏¥‡πà‡∏° API Server ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ CPU
        """
    )
    
    parser.add_argument("--api", action="store_true", help="‡πÄ‡∏£‡∏¥‡πà‡∏° API Server")
    parser.add_argument("--web", action="store_true", help="‡πÄ‡∏£‡∏¥‡πà‡∏° Web Interface")
    parser.add_argument("--test", action="store_true", help="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
    parser.add_argument("--status", action="store_true", help="‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
    parser.add_argument("--cleanup", action="store_true", help="‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
    parser.add_argument("--check", action="store_true", help="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
    parser.add_argument("--host", default="0.0.0.0", help="Host ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Server")
    parser.add_argument("--port", type=int, default=6969, help="Port ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Server")
    parser.add_argument("--web-port", type=int, default=7000, help="Port ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web Interface")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° GPU options
    parser.add_argument("--gpu", type=int, help="‡∏Å‡∏≥‡∏´‡∏ô‡∏î GPU ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (0, 1, 2, ...)")
    parser.add_argument("--cpu", action="store_true", help="‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ CPU ‡πÅ‡∏°‡πâ‡∏°‡∏µ GPU")
    parser.add_argument("--fp16", action="store_true", help="‡πÉ‡∏ä‡πâ mixed precision (FP16) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥")
    parser.add_argument("--memory-limit", type=int, default=0, help="‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ GPU (MB)")
    
    args = parser.parse_args()
    
    show_banner()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á arguments
    if args.cpu and args.gpu is not None:
        print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ --cpu ‡πÅ‡∏•‡∏∞ --gpu ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô")
        return
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î GPU ID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    gpu_id = None
    if args.gpu is not None:
        gpu_id = args.gpu
    elif args.cpu:
        gpu_id = -1  # -1 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÉ‡∏ä‡πâ CPU
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ argument ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
    if not any([args.api, args.web, args.test, args.status, args.cleanup, args.check]):
        print("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
        print("1. API Server (--api)")
        print("2. Web Interface (--web)")
        print("3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö (--test)")
        print("4. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (--status)")
        print("5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö (--check)")
        print("6. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î (--cleanup)")
        print()
        print("üí° ‡πÉ‡∏ä‡πâ --help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return
    
    try:
        if args.check:
            system_ok = check_system()
            if not system_ok:
                print("\\n‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
                sys.exit(1)
            else:
                print("\\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        if args.status:
            show_status()
        
        if args.cleanup:
            cleanup_system()
        
        if args.test:
            success = asyncio.run(test_system())
            if not success:
                print("\\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô")
                sys.exit(1)
            else:
                print("\\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        if args.api:
            start_api_server(args.host, args.port, gpu_id)
        
        if args.web:
            start_web_interface(args.web_port, gpu_id)
    
    except KeyboardInterrupt:
        print("\\nüëã ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    except Exception as e:
        print(f"\\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

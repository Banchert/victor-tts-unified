#!/usr/bin/env python3
"""
üß™ RVC Test Script
"""
import sys
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

def test_rvc_basic():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö RVC ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("üß™ Testing RVC Basic...")
    
    try:
        from rvc_wrapper import create_rvc_wrapper
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper
        wrapper = create_rvc_wrapper()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        info = wrapper.get_system_info()
        print(f"‚úÖ System Info: {info}")
        
        if not info["rvc_available"]:
            print("‚ùå RVC not available")
            return False
        
        if not info["initialized"]:
            print("‚ùå RVC not initialized")
            return False
        
        # ‡∏î‡∏∂‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        models = wrapper.get_available_models()
        print(f"‚úÖ Available models: {models}")
        
        if not models:
            print("‚ùå No models available")
            return False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å
        test_model = models[0]
        print(f"üß™ Testing model: {test_model}")
        
        model_info = wrapper.get_model_info(test_model)
        print(f"‚úÖ Model info: {model_info}")
        
        if wrapper.test_model(test_model):
            print(f"‚úÖ Model {test_model} test passed")
            return True
        else:
            print(f"‚ùå Model {test_model} test failed")
            return False
            
    except Exception as e:
        print(f"‚ùå RVC test failed: {e}")
        return False

def test_rvc_conversion():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    print("üé§ Testing RVC Conversion...")
    
    try:
        from rvc_wrapper import create_rvc_wrapper
        import tempfile
        import os
        
        wrapper = create_rvc_wrapper()
        
        if not wrapper.get_system_info()["initialized"]:
            print("‚ùå RVC not initialized")
            return False
        
        models = wrapper.get_available_models()
        if not models:
            print("‚ùå No models available")
            return False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        import wave
        import numpy as np
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå WAV ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        sample_rate = 44100
        duration = 1  # 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        frequency = 440  # 440 Hz
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á sine wave
        t = np.linspace(0, duration, int(sample_rate * duration), False)
        audio_data = np.sin(2 * np.pi * frequency * t)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 16-bit PCM
        audio_data = (audio_data * 32767).astype(np.int16)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as f:
            test_file = f.name
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô WAV
        with wave.open(test_file, 'wb') as wav_file:
            wav_file.setnchannels(1)  # mono
            wav_file.setsampwidth(2)  # 16-bit
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_data.tobytes())
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        with open(test_file, 'rb') as f:
            test_audio = f.read()
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
            result = wrapper.convert_audio_data(
                test_audio, models[0],
                transpose=0, index_ratio=0.75
            )
            
            print(f"‚úÖ Conversion test passed: {len(result)} bytes")
            return True
            
        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            try:
                os.unlink(test_file)
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå Conversion test failed: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ RVC Test Suite")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    basic_ok = test_rvc_basic()
    
    if basic_ok:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
        conversion_ok = test_rvc_conversion()
        
        if conversion_ok:
            print("üéâ All RVC tests passed!")
        else:
            print("‚ö†Ô∏è Basic tests passed but conversion failed")
    else:
        print("‚ùå Basic RVC tests failed")

if __name__ == "__main__":
    main()

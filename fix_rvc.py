#!/usr/bin/env python3
"""
üîß RVC Fix Script - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RVC ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
"""
import os
import sys
import json
import time
import logging
from pathlib import Path
from typing import Dict, Any, List

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("RVC_FIX")

class RVCFixer:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RVC"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.rvc_dir = self.project_root / "rvc"
        self.logs_dir = self.project_root / "logs"
        self.models_dir = self.project_root / "models"
        
    def check_rvc_structure(self) -> Dict[str, Any]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á RVC"""
        logger.info("üîç Checking RVC structure...")
        
        structure = {
            "rvc_dir_exists": self.rvc_dir.exists(),
            "logs_dir_exists": self.logs_dir.exists(),
            "models_dir_exists": self.models_dir.exists(),
            "rvc_subdirs": {},
            "model_files": {},
            "issues": []
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RVC subdirectories
        if self.rvc_dir.exists():
            rvc_subdirs = ["infer", "lib", "models", "configs", "train"]
            for subdir in rvc_subdirs:
                subdir_path = self.rvc_dir / subdir
                structure["rvc_subdirs"][subdir] = subdir_path.exists()
                
                if not subdir_path.exists():
                    structure["issues"].append(f"Missing RVC subdirectory: {subdir}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        important_files = [
            "rvc/infer/infer.py",
            "rvc/infer/pipeline.py",
            "rvc/lib/utils.py",
            "rvc/configs/config.py"
        ]
        
        for file_path in important_files:
            full_path = self.project_root / file_path
            structure["model_files"][file_path] = full_path.exists()
            
            if not full_path.exists():
                structure["issues"].append(f"Missing important file: {file_path}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC
        if self.logs_dir.exists():
            model_dirs = [d for d in self.logs_dir.iterdir() if d.is_dir() and not d.name.startswith('.')]
            structure["available_models"] = [d.name for d in model_dirs]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
            for model_dir in model_dirs:
                model_files = list(model_dir.glob("*.pth"))
                model_files.extend(list(model_dir.glob("*.index")))
                
                if not model_files:
                    structure["issues"].append(f"Model {model_dir.name} has no .pth or .index files")
        
        logger.info(f"‚úÖ RVC structure check completed. Issues: {len(structure['issues'])}")
        return structure
    
    def fix_rvc_imports(self) -> bool:
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ import ‡∏Ç‡∏≠‡∏á RVC"""
        logger.info("üîß Fixing RVC imports...")
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå __init__.py ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå RVC
            init_files = [
                "rvc/__init__.py",
                "rvc/infer/__init__.py",
                "rvc/lib/__init__.py",
                "rvc/models/__init__.py",
                "rvc/configs/__init__.py",
                "rvc/train/__init__.py"
            ]
            
            for init_file in init_files:
                init_path = self.project_root / init_file
                if not init_path.exists():
                    init_path.parent.mkdir(parents=True, exist_ok=True)
                    init_path.write_text("# RVC Module\n", encoding='utf-8')
                    logger.info(f"‚úÖ Created {init_file}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to fix RVC imports: {e}")
            return False
    
    def create_rvc_wrapper(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á RVC wrapper ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤"""
        rvc_wrapper = '''#!/usr/bin/env python3
"""
üé§ RVC Wrapper - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤
"""
import os
import sys
import logging
import torch
import numpy as np
from pathlib import Path
from typing import List, Optional, Dict, Any

# Add RVC to path
rvc_path = Path(__file__).parent / "rvc"
if rvc_path.exists():
    sys.path.insert(0, str(rvc_path))

logger = logging.getLogger("RVC_WRAPPER")

class RVCWrapper:
    """RVC Wrapper ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤"""
    
    def __init__(self, device: str = "cpu", models_dir: str = "logs"):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RVC Wrapper
        
        Args:
            device: ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (cpu, cuda:0, etc.)
            models_dir: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
        """
        self.device = device
        self.models_dir = Path(models_dir)
        self.models_cache = {}
        self.initialized = False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RVC availability
        self.rvc_available = self._check_rvc_availability()
        
        if self.rvc_available:
            self._initialize_rvc()
        else:
            logger.warning("‚ö†Ô∏è RVC not available")
    
    def _check_rvc_availability(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ RVC ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            required_files = [
                "rvc/infer/infer.py",
                "rvc/lib/utils.py",
                "rvc/configs/config.py"
            ]
            
            for file_path in required_files:
                if not (Path(__file__).parent / file_path).exists():
                    logger.warning(f"Missing required file: {file_path}")
                    return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
            try:
                import torch
                import numpy
                logger.info("‚úÖ RVC dependencies available")
                return True
            except ImportError as e:
                logger.warning(f"Missing RVC dependencies: {e}")
                return False
                
        except Exception as e:
            logger.error(f"Error checking RVC availability: {e}")
            return False
    
    def _initialize_rvc(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RVC system"""
        try:
            # Import RVC modules
            from rvc.infer.infer import VoiceConverter
            from rvc.configs.config import Config
            
            self.voice_converter = VoiceConverter()
            self.config = Config()
            self.config.device = self.device
            self.config.weight_root = str(self.models_dir)
            
            # ‡πÇ‡∏´‡∏•‡∏î embedder
            self._load_embedder()
            
            self.initialized = True
            logger.info(f"‚úÖ RVC initialized on {self.device}")
            
        except Exception as e:
            logger.error(f"‚ùå RVC initialization failed: {e}")
            self.initialized = False
    
    def _load_embedder(self):
        """‡πÇ‡∏´‡∏•‡∏î embedder model"""
        try:
            # ‡πÉ‡∏ä‡πâ contentvec ‡πÄ‡∏õ‡πá‡∏ô embedder ‡∏´‡∏•‡∏±‡∏Å
            embedder_model = "contentvec"
            self.voice_converter.load_hubert(embedder_model)
            logger.info(f"‚úÖ Loaded embedder: {embedder_model}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to load embedder: {e}")
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ embedder ‡∏≠‡∏∑‡πà‡∏ô
            try:
                self.voice_converter.load_hubert("contentvec")
                logger.info("‚úÖ Loaded fallback embedder")
            except Exception as e2:
                logger.error(f"‚ùå All embedders failed: {e2}")
                raise
    
    def get_available_models(self) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        if not self.rvc_available or not self.initialized:
            return []
        
        try:
            models = []
            if self.models_dir.exists():
                for model_dir in self.models_dir.iterdir():
                    if model_dir.is_dir() and not model_dir.name.startswith('.'):
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        pth_files = list(model_dir.glob("*.pth"))
                        index_files = list(model_dir.glob("*.index"))
                        
                        if pth_files and index_files:
                            models.append(model_dir.name)
            
            logger.info(f"‚úÖ Found {len(models)} RVC models")
            return models
            
        except Exception as e:
            logger.error(f"‚ùå Error getting models: {e}")
            return []
    
    def get_model_info(self, model_name: str) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        if not self.rvc_available or not self.initialized:
            return {"error": "RVC not available"}
        
        try:
            model_dir = self.models_dir / model_name
            if not model_dir.exists():
                return {"error": f"Model {model_name} not found"}
            
            # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå .pth ‡πÅ‡∏•‡∏∞ .index
            pth_files = list(model_dir.glob("*.pth"))
            index_files = list(model_dir.glob("*.index"))
            
            return {
                "name": model_name,
                "directory": str(model_dir),
                "pth_files": [f.name for f in pth_files],
                "index_files": [f.name for f in index_files],
                "valid": len(pth_files) > 0 and len(index_files) > 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting model info: {e}")
            return {"error": str(e)}
    
    def convert_voice(self, input_path: str, output_path: str, model_name: str,
                     transpose: int = 0, index_ratio: float = 0.75,
                     f0_method: str = "rmvpe", **kwargs) -> str:
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ RVC
        
        Args:
            input_path: ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
            output_path: ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏≠‡∏Å
            model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
            transpose: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö pitch
            index_ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô index
            f0_method: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ f0
            
        Returns:
            str: path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        """
        if not self.rvc_available or not self.initialized:
            raise Exception("RVC not available or not initialized")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤
            if not Path(input_path).exists():
                raise Exception(f"Input file not found: {input_path}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
            model_info = self.get_model_info(model_name)
            if "error" in model_info:
                raise Exception(f"Model error: {model_info['error']}")
            
            if not model_info.get("valid", False):
                raise Exception(f"Model {model_name} is not valid")
            
            logger.info(f"üé§ Converting voice with model: {model_name}")
            logger.info(f"üìÅ Input: {input_path}")
            logger.info(f"üìÅ Output: {output_path}")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            result_path = self.voice_converter.convert_voice(
                input_path=input_path,
                output_path=output_path,
                model_name=model_name,
                transpose=transpose,
                index_ratio=index_ratio,
                f0_method=f0_method,
                **kwargs
            )
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if not Path(result_path).exists():
                raise Exception("Conversion failed - output file not created")
            
            logger.info(f"‚úÖ Voice conversion completed: {result_path}")
            return result_path
            
        except Exception as e:
            logger.error(f"‚ùå Voice conversion failed: {e}")
            raise
    
    def convert_audio_data(self, audio_data: bytes, model_name: str,
                          transpose: int = 0, index_ratio: float = 0.75,
                          f0_method: str = "rmvpe", **kwargs) -> bytes:
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á bytes
        
        Args:
            audio_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
            transpose: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö pitch
            index_ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô index
            f0_method: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ f0
            
        Returns:
            bytes: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            import tempfile
            import time
            
            timestamp = int(time.time() * 1000)
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_input:
                temp_input.write(audio_data)
                temp_input_path = temp_input.name
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_output:
                temp_output_path = temp_output.name
            
            try:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                result_path = self.convert_voice(
                    input_path=temp_input_path,
                    output_path=temp_output_path,
                    model_name=model_name,
                    transpose=transpose,
                    index_ratio=index_ratio,
                    f0_method=f0_method,
                    **kwargs
                )
                
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                with open(result_path, 'rb') as f:
                    converted_audio = f.read()
                
                return converted_audio
                
            finally:
                # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                try:
                    os.unlink(temp_input_path)
                    os.unlink(temp_output_path)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"‚ùå Audio data conversion failed: {e}")
            raise
    
    def test_model(self, model_name: str) -> bool:
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        try:
            model_info = self.get_model_info(model_name)
            if "error" in model_info:
                logger.error(f"‚ùå Model test failed: {model_info['error']}")
                return False
            
            if not model_info.get("valid", False):
                logger.error(f"‚ùå Model {model_name} is not valid")
                return False
            
            logger.info(f"‚úÖ Model {model_name} test passed")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Model test failed: {e}")
            return False
    
    def get_system_info(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
        return {
            "rvc_available": self.rvc_available,
            "initialized": self.initialized,
            "device": self.device,
            "models_dir": str(self.models_dir),
            "models_count": len(self.get_available_models()),
            "torch_available": "torch" in sys.modules,
            "cuda_available": torch.cuda.is_available() if "torch" in sys.modules else False
        }

# Helper functions
def create_rvc_wrapper(**kwargs):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á RVC wrapper instance"""
    return RVCWrapper(**kwargs)

def test_rvc_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö RVC"""
    print("üß™ Testing RVC system...")
    
    wrapper = create_rvc_wrapper()
    info = wrapper.get_system_info()
    
    print(f"‚úÖ RVC System Info: {info}")
    
    if info["rvc_available"] and info["initialized"]:
        models = wrapper.get_available_models()
        print(f"‚úÖ Available models: {models}")
        
        if models:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å
            test_model = models[0]
            if wrapper.test_model(test_model):
                print(f"‚úÖ Model {test_model} test passed")
            else:
                print(f"‚ùå Model {test_model} test failed")
    else:
        print("‚ùå RVC system not available")

if __name__ == "__main__":
    test_rvc_system()
'''
        
        wrapper_file = self.project_root / "rvc_wrapper.py"
        try:
            with open(wrapper_file, 'w', encoding='utf-8') as f:
                f.write(rvc_wrapper)
            
            logger.info("‚úÖ RVC wrapper created")
            return str(wrapper_file)
        except Exception as e:
            logger.error(f"‚ùå Failed to create RVC wrapper: {e}")
            return ""
    
    def fix_model_paths(self) -> bool:
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        logger.info("üîß Fixing model paths...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á symbolic links ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if self.logs_dir.exists() and not self.models_dir.exists():
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á symbolic link ‡∏à‡∏≤‡∏Å logs ‡πÑ‡∏õ models
                import os
                if os.name == 'nt':  # Windows
                    # Windows ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö symbolic link ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÉ‡∏´‡πâ copy ‡πÅ‡∏ó‡∏ô
                    import shutil
                    shutil.copytree(self.logs_dir, self.models_dir, dirs_exist_ok=True)
                    logger.info("‚úÖ Copied logs to models directory")
                else:
                    # Unix-like systems
                    os.symlink(self.logs_dir, self.models_dir)
                    logger.info("‚úÖ Created symbolic link from logs to models")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to fix model paths: {e}")
            return False
    
    def create_test_script(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö RVC"""
        test_script = '''#!/usr/bin/env python3
"""
üß™ RVC Test Script
"""
import sys
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

def test_rvc_basic():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö RVC ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("üß™ Testing RVC Basic...")
    
    try:
        from rvc_wrapper import create_rvc_wrapper
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper
        wrapper = create_rvc_wrapper()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        info = wrapper.get_system_info()
        print(f"‚úÖ System Info: {info}")
        
        if not info["rvc_available"]:
            print("‚ùå RVC not available")
            return False
        
        if not info["initialized"]:
            print("‚ùå RVC not initialized")
            return False
        
        # ‡∏î‡∏∂‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        models = wrapper.get_available_models()
        print(f"‚úÖ Available models: {models}")
        
        if not models:
            print("‚ùå No models available")
            return False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏£‡∏Å
        test_model = models[0]
        print(f"üß™ Testing model: {test_model}")
        
        model_info = wrapper.get_model_info(test_model)
        print(f"‚úÖ Model info: {model_info}")
        
        if wrapper.test_model(test_model):
            print(f"‚úÖ Model {test_model} test passed")
            return True
        else:
            print(f"‚ùå Model {test_model} test failed")
            return False
            
    except Exception as e:
        print(f"‚ùå RVC test failed: {e}")
        return False

def test_rvc_conversion():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    print("üé§ Testing RVC Conversion...")
    
    try:
        from rvc_wrapper import create_rvc_wrapper
        import tempfile
        import os
        
        wrapper = create_rvc_wrapper()
        
        if not wrapper.get_system_info()["initialized"]:
            print("‚ùå RVC not initialized")
            return False
        
        models = wrapper.get_available_models()
        if not models:
            print("‚ùå No models available")
            return False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_audio = b"RIFF" + b"\\x00" * 44  # Minimal WAV header
        
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as f:
            f.write(test_audio)
            test_file = f.name
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
            result = wrapper.convert_audio_data(
                test_audio, models[0],
                transpose=0, index_ratio=0.75
            )
            
            print(f"‚úÖ Conversion test passed: {len(result)} bytes")
            return True
            
        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            try:
                os.unlink(test_file)
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå Conversion test failed: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ RVC Test Suite")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    basic_ok = test_rvc_basic()
    
    if basic_ok:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
        conversion_ok = test_rvc_conversion()
        
        if conversion_ok:
            print("üéâ All RVC tests passed!")
        else:
            print("‚ö†Ô∏è Basic tests passed but conversion failed")
    else:
        print("‚ùå Basic RVC tests failed")

if __name__ == "__main__":
    main()
'''
        
        test_file = self.project_root / "test_rvc_fixed.py"
        try:
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(test_script)
            
            logger.info("‚úÖ RVC test script created")
            return str(test_file)
        except Exception as e:
            logger.error(f"‚ùå Failed to create RVC test script: {e}")
            return ""
    
    def run_rvc_fixes(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RVC ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        logger.info("üîß Starting RVC fixes...")
        
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        logger.info("üîç Checking RVC structure...")
        structure = self.check_rvc_structure()
        
        if structure["issues"]:
            logger.warning(f"‚ö†Ô∏è Found {len(structure['issues'])} issues:")
            for issue in structure["issues"]:
                logger.warning(f"  - {issue}")
        
        # 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports
        logger.info("üîß Fixing RVC imports...")
        self.fix_rvc_imports()
        
        # 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç model paths
        logger.info("üîß Fixing model paths...")
        self.fix_model_paths()
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á RVC wrapper
        logger.info("üé§ Creating RVC wrapper...")
        wrapper_file = self.create_rvc_wrapper()
        
        # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        logger.info("üß™ Creating test script...")
        test_file = self.create_test_script()
        
        # 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
        logger.info("üß™ Testing RVC system...")
        try:
            import subprocess
            result = subprocess.run([sys.executable, test_file], 
                                  capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                logger.info("‚úÖ RVC test passed")
                print(result.stdout)
            else:
                logger.warning("‚ö†Ô∏è RVC test failed")
                print(result.stderr)
                
        except Exception as e:
            logger.error(f"‚ùå RVC test error: {e}")
        
        logger.info("‚úÖ RVC fixes completed!")
        logger.info(f"üé§ RVC wrapper: {wrapper_file}")
        logger.info(f"üß™ Test script: {test_file}")
        logger.info("üéØ Run 'test_rvc_fixed.py' to test RVC")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üîß RVC Fixer")
    print("=" * 50)
    
    fixer = RVCFixer()
    fixer.run_rvc_fixes()

if __name__ == "__main__":
    main() 
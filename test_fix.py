#!/usr/bin/env python3
"""
üß™ Test Fix Script - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
"""

def test_model_utils():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö model_utils"""
    try:
        from model_utils import safe_model_processing, normalize_model_name
        print("‚úÖ Import model_utils ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö normalize_model_name
        test_cases = [
            "test_model",
            {"name": "test_model_dict"},
            ["test_model_list"],
            None,
            "",
            123
        ]
        
        print("\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö normalize_model_name:")
        for test_case in test_cases:
            result = normalize_model_name(test_case)
            print(f"  {test_case} -> {result}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö safe_model_processing
        available_models = ["model1", "model2", "model3"]
        test_model, error = safe_model_processing("model1", available_models)
        print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö safe_model_processing:")
        print(f"  Result: {test_model}, Error: {error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö model_utils ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False

def test_core_import():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö import core system"""
    try:
        from tts_rvc_core import TTSRVCCore
        print("‚úÖ Import tts_rvc_core ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö tts_rvc_core ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False

def test_rvc_api_import():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö import rvc_api"""
    try:
        from rvc_api import RVCConverter
        print("‚úÖ Import rvc_api ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö rvc_api ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False

def test_web_interface_import():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö import web_interface"""
    try:
        from web_interface import WebInterface
        print("‚úÖ Import web_interface ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö web_interface ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False

def main():
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
    print("=" * 50)
    
    tests = [
        ("Model Utils", test_model_utils),
        ("TTS-RVC Core", test_core_import),
        ("RVC API", test_rvc_api_import),
        ("Web Interface", test_web_interface_import),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {name}:")
        if test_func():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üéâ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {passed}/{total} ‡∏ú‡πà‡∏≤‡∏ô")
    
    if passed == total:
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 'unhashable type: dict' ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß")
        print("\nüöÄ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("  1. ‡∏£‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã: python web_interface.py")
        print("  2. ‡∏£‡∏±‡∏ô API ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: python main_api_server.py")
        print("  3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• RVC ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs/")
    else:
        print(f"‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
    
    return passed == total

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
üîß Fix Project Script - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "unhashable type: 'dict'" ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
"""

import os
import sys
import json
import re
from pathlib import Path

def fix_web_interface_syntax():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax error ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå web_interface.py"""
    file_path = Path("web_interface.py")
    
    if not file_path.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå web_interface.py")
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç double curly braces ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á dict
        fixes_made = 0
        
        # Pattern 1: {{{{ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á dict
        if '{{{{' in content:
            content = content.replace('{{{{', '{{')
            fixes_made += 1
            print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç double curly braces ‡πÅ‡∏•‡πâ‡∏ß")
        
        # Pattern 2: }}}} ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î dict
        if '}}}}' in content:
            content = content.replace('}}}}', '}}')
            fixes_made += 1
            print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç closing double curly braces ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö import cgi ‡∏ó‡∏µ‡πà deprecated
        if 'import cgi' in content:
            content = content.replace('import cgi', '# import cgi  # deprecated')
            fixes_made += 1
            print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç deprecated import cgi ‡πÅ‡∏•‡πâ‡∏ß")
        
        if fixes_made > 0:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {fixes_made} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô web_interface.py ‡πÅ‡∏•‡πâ‡∏ß")
            return True
        else:
            print("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ syntax ‡πÉ‡∏ô web_interface.py")
            return True
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç web_interface.py: {e}")
        return False

def fix_model_handling():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î unhashable type error"""
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå model_utils.py
    model_utils_content = '''"""
üîß Model Utilities - ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô unhashable type error
"""

def normalize_model_name(model_param):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    
    Args:
        model_param: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô string, dict, list, ‡∏´‡∏£‡∏∑‡∏≠ type ‡∏≠‡∏∑‡πà‡∏ô
        
    Returns:
        str or None: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
    """
    if model_param is None:
        return None
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡πâ‡∏ß
    if isinstance(model_param, str):
        cleaned = model_param.strip()
        return cleaned if cleaned else None
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict
    if isinstance(model_param, dict):
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
        for key in ['name', 'model_name', 'model', 'value']:
            if key in model_param:
                return normalize_model_name(model_param[key])
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ key ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
        if model_param:
            first_value = next(iter(model_param.values()))
            return normalize_model_name(first_value)
        
        return None
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô list
    if isinstance(model_param, list):
        if len(model_param) > 0:
            return normalize_model_name(model_param[0])
        return None
    
    # type ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
    try:
        result = str(model_param).strip()
        return result if result else None
    except:
        return None

def validate_model_exists(model_name, available_models):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    
    Args:
        model_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
        available_models: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        
    Returns:
        str or None: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    """
    if not model_name or not available_models:
        return None
    
    # ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if model_name in available_models:
        return model_name
    
    # ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö case insensitive
    model_name_lower = model_name.lower()
    for available_model in available_models:
        if available_model.lower() == model_name_lower:
            return available_model
    
    # ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö partial match
    for available_model in available_models:
        if model_name in available_model or available_model in model_name:
            return available_model
    
    return None

def safe_model_processing(model_param, available_models, default_model=None):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    
    Args:
        model_param: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
        available_models: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        default_model: ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
    Returns:
        tuple: (model_name, error_message)
    """
    try:
        # Step 1: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
        normalized_model = normalize_model_name(model_param)
        
        if normalized_model is None:
            if default_model:
                return default_model, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {default_model}"
            else:
                return None, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
        
        # Step 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        validated_model = validate_model_exists(normalized_model, available_models)
        
        if validated_model:
            return validated_model, None
        else:
            available_str = ", ".join(available_models[:5])  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            if len(available_models) > 5:
                available_str += f" ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏µ‡∏Å {len(available_models) - 5} ‡∏ï‡∏±‡∏ß"
            
            error_msg = f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• '{normalized_model}' ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£. ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {available_str}"
            
            if default_model and default_model in available_models:
                return default_model, error_msg + f" ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {default_model}"
            else:
                return None, error_msg
    
    except Exception as e:
        error_msg = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}"
        if default_model:
            return default_model, error_msg + f" ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {default_model}"
        else:
            return None, error_msg
'''
    
    try:
        with open("model_utils.py", 'w', encoding='utf-8') as f:
            f.write(model_utils_content)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå model_utils.py ‡πÅ‡∏•‡πâ‡∏ß")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå model_utils.py ‡πÑ‡∏î‡πâ: {e}")
        return False

def update_tts_rvc_core():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå tts_rvc_core.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ model_utils"""
    
    file_path = Path("tts_rvc_core.py")
    if not file_path.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå tts_rvc_core.py")
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° import model_utils
        if 'from model_utils import' not in content:
            import_line = "from model_utils import safe_model_processing, normalize_model_name\\n"
            # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å import logging
            logging_pos = content.find('import logging')
            if logging_pos != -1:
                # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                end_pos = content.find('\\n', logging_pos)
                if end_pos != -1:
                    content = content[:end_pos+1] + import_line + content[end_pos+1:]
                    print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import model_utils ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ rvc_model ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô process_unified
        old_model_handling = '''                    # ‡πÅ‡∏õ‡∏•‡∏á rvc_model ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô type ‡∏≠‡∏∑‡πà‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç unhashable error)
                    if not isinstance(rvc_model, str):
                        logger.warning(f"RVC model parameter is not a string: {rvc_model} (type: {type(rvc_model)})")
                        if isinstance(rvc_model, dict) and 'name' in rvc_model:
                            rvc_model = rvc_model['name']
                            logger.info(f"Extracted model name from dict: {rvc_model}")
                        elif isinstance(rvc_model, list) and len(rvc_model) > 0:
                            rvc_model = rvc_model[0]
                            logger.info(f"Extracted model name from list: {rvc_model}")
                        else:
                            rvc_model = str(rvc_model)
                            logger.info(f"Converted model to string: {rvc_model}")'''
        
        new_model_handling = '''                    # ‡πÅ‡∏õ‡∏•‡∏á rvc_model ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç unhashable error)
                    available_models = self.get_available_rvc_models()
                    rvc_model, model_error = safe_model_processing(
                        rvc_model, 
                        available_models,
                        available_models[0] if available_models else None
                    )
                    
                    if model_error:
                        logger.warning(f"Model processing warning: {model_error}")
                    
                    if rvc_model:
                        logger.info(f"Using RVC model: {rvc_model}")'''
        
        if old_model_handling in content:
            content = content.replace(old_model_handling, new_model_handling)
            print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô tts_rvc_core.py ‡πÅ‡∏•‡πâ‡∏ß")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï tts_rvc_core.py: {e}")
        return False

def update_rvc_api():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå rvc_api.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ model_utils"""
    
    file_path = Path("rvc_api.py")
    if not file_path.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå rvc_api.py")
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° import model_utils
        if 'from model_utils import' not in content:
            import_line = "from model_utils import normalize_model_name\\n"
            # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å import logging
            logging_pos = content.find('import logging')
            if logging_pos != -1:
                end_pos = content.find('\\n', logging_pos)
                if end_pos != -1:
                    content = content[:end_pos+1] + import_line + content[end_pos+1:]
                    print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import model_utils ‡πÉ‡∏ô rvc_api.py ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ model_name ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô convert_voice
        old_convert_handling = '''            # ‡πÅ‡∏õ‡∏•‡∏á model_name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô type ‡∏≠‡∏∑‡πà‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç unhashable error)
            if not isinstance(model_name, str):
                logger.warning(f"Model name parameter is not a string: {model_name} (type: {type(model_name)})")
                if isinstance(model_name, dict) and 'name' in model_name:
                    model_name = model_name['name']
                    logger.info(f"Extracted model name from dict: {model_name}")
                elif isinstance(model_name, list) and len(model_name) > 0:
                    model_name = model_name[0]
                    logger.info(f"Extracted model name from list: {model_name}")
                else:
                    model_name = str(model_name)
                    logger.info(f"Converted model name to string: {model_name}")'''
        
        new_convert_handling = '''            # ‡πÅ‡∏õ‡∏•‡∏á model_name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç unhashable error)
            model_name = normalize_model_name(model_name)
            if model_name is None:
                raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå model_name ‡πÑ‡∏î‡πâ")
            
            logger.info(f"Using model name: {model_name}")'''
        
        if old_convert_handling in content:
            content = content.replace(old_convert_handling, new_convert_handling)
            print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô rvc_api.py ‡πÅ‡∏•‡πâ‡∏ß")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rvc_api.py: {e}")
        return False

def update_web_interface():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå web_interface.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ model_utils"""
    
    file_path = Path("web_interface.py")
    if not file_path.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå web_interface.py")
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° import model_utils
        if 'from model_utils import' not in content:
            import_line = "from model_utils import safe_model_processing\\n"
            # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å import asyncio
            asyncio_pos = content.find('import asyncio')
            if asyncio_pos != -1:
                end_pos = content.find('\\n', asyncio_pos)
                if end_pos != -1:
                    content = content[:end_pos+1] + import_line + content[end_pos+1:]
                    print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import model_utils ‡πÉ‡∏ô web_interface.py ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ rvc_model ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _process_request
        old_request_handling = '''                    # Additional safety check for rvc_model parameter
                    if rvc_model_param is not None:
                        if isinstance(rvc_model_param, str):
                            rvc_model_param = rvc_model_param.strip()
                            if rvc_model_param == "":
                                rvc_model_param = None
                        elif isinstance(rvc_model_param, dict):
                            if 'name' in rvc_model_param:
                                rvc_model_param = rvc_model_param['name']
                            else:
                                rvc_model_param = None
                        elif isinstance(rvc_model_param, list):
                            if len(rvc_model_param) > 0:
                                rvc_model_param = str(rvc_model_param[0])
                            else:
                                rvc_model_param = None
                        else:
                            rvc_model_param = str(rvc_model_param) if rvc_model_param else None'''
        
        new_request_handling = '''                    # ‡πÉ‡∏ä‡πâ safe_model_processing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                    if rvc_model_param is not None:
                        available_models = core.get_available_rvc_models() if core else []
                        rvc_model_param, model_error = safe_model_processing(
                            rvc_model_param,
                            available_models,
                            available_models[0] if available_models else None
                        )
                        
                        if model_error:
                            print(f"‚ö†Ô∏è Model processing warning: {model_error}")'''
        
        if old_request_handling in content:
            content = content.replace(old_request_handling, new_request_handling)
            print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô web_interface.py ‡πÅ‡∏•‡πâ‡∏ß")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï web_interface.py: {e}")
        return False

def check_models_directory():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    dirs_to_check = [
        "logs",
        "voice_models", 
        "storage/temp",
        "config"
    ]
    
    for dir_path in dirs_to_check:
        path = Path(dir_path)
        if not path.exists():
            try:
                path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {dir_path} ‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {dir_path}: {e}")
                return False
        else:
            print(f"‚ÑπÔ∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {dir_path} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
    
    return True

def create_performance_config():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    config_dir = Path("config")
    config_file = config_dir / "performance_config.json"
    
    if config_file.exists():
        print("‚ÑπÔ∏è ‡πÑ‡∏ü‡∏•‡πå performance_config.json ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        return True
    
    default_config = {
        "tts_batch_size": 1,
        "tts_chunk_size": 5000,
        "tts_max_concurrent": 1,
        "rvc_batch_size": 1,
        "rvc_use_half_precision": True,
        "rvc_cache_models": True,
        "audio_sample_rate": 44100,
        "audio_chunk_duration": 10,
        "audio_use_soxr": True,
        "use_multiprocessing": True,
        "max_workers": 1,
        "memory_limit_gb": 2,
        "gpu_memory_fraction": 0.8,
        "gpu_allow_growth": True,
        "gpu_mixed_precision": True
    }
    
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå performance_config.json ‡πÅ‡∏•‡πâ‡∏ß")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå performance_config.json: {e}")
        return False

def test_import_fixes():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö import ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    print("\\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö model_utils
        from model_utils import safe_model_processing, normalize_model_name
        print("‚úÖ import model_utils ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize_model_name
        test_cases = [
            "test_model",
            {"name": "test_model_dict"},
            ["test_model_list"],
            None,
            "",
            123
        ]
        
        for test_case in test_cases:
            result = normalize_model_name(test_case)
            print(f"  normalize_model_name({test_case}) = {result}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô safe_model_processing
        available_models = ["model1", "model2", "model3"]
        test_model, error = safe_model_processing("model1", available_models)
        print(f"  safe_model_processing result: {test_model}, error: {error}")
        
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö model_utils ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö import ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False
    
    return True

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
    print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...")
    print("=" * 50)
    
    success_count = 0
    total_tasks = 7
    
    # 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax error ‡πÉ‡∏ô web_interface.py
    print("\\n1Ô∏è‚É£ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax error ‡πÉ‡∏ô web_interface.py")
    if fix_web_interface_syntax():
        success_count += 1
    
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á model_utils.py
    print("\\n2Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå model_utils.py")
    if fix_model_handling():
        success_count += 1
    
    # 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï tts_rvc_core.py
    print("\\n3Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï tts_rvc_core.py")
    if update_tts_rvc_core():
        success_count += 1
    
    # 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rvc_api.py
    print("\\n4Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rvc_api.py")
    if update_rvc_api():
        success_count += 1
    
    # 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï web_interface.py
    print("\\n5Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï web_interface.py")
    if update_web_interface():
        success_count += 1
    
    # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    print("\\n6Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
    if check_models_directory():
        success_count += 1
    
    # 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config
    print("\\n7Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config")
    if create_performance_config():
        success_count += 1
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    print("\\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
    test_import_fixes()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print("\\n" + "=" * 50)
    print(f"üéâ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {success_count}/{total_tasks} ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    if success_count == total_tasks:
        print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        print("\\nüìã ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("  - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax error ‡πÉ‡∏ô web_interface.py")
        print("  - ‡∏™‡∏£‡πâ‡∏≤‡∏á model_utils.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        print("  - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ")
        print("  - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå config ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
        print("\\nüöÄ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß:")
        print("     python web_interface.py")
        print("     ‡∏´‡∏£‡∏∑‡∏≠ python main_api_server.py")
    else:
        print(f"‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {success_count}/{total_tasks} ‡∏á‡∏≤‡∏ô")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    return success_count == total_tasks

if __name__ == "__main__":
    main()